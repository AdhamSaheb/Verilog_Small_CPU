module smallcpu(out,clk);
input clk;
reg [7:0] R [15:0];
output out [15:0];
reg [2^12:0] Memory [15:0];
reg PC,IR,MAR,MBR [15:0];
reg state [2:0];
wire I1,I2;
always @(posedge clk)

case (state)

//fetch
	0:begin
	MAR <= PC;
	MBR<=Memory[MAR];
	IR<=MBR;
	PC = PC + 1;
	state = state + 1;
	end
	
	//decode
	1:begin
		case (IR[15:12])
		0,1,2: begin	MAR <= IR[11:3]; end
		3,4,5,6,7,8: begin  MAR <= IR[11:6]; end
		endcase
		state = state + 1;
		end
	
	//operand fetch
	2: begin 
			case(IR[15:12])
			5,6 :begin
					MBR <= MAR[2:0];
					I1 <= MBR;
					MBR <= MAR[5:3];
					I2 <= MBR;
					end
					endcase
					state = state + 1;
					end

	//excute 				
	3:begin
			case (IR[15:12])
				0: begin R[IR[5:3]] = R[IR[11:9]] & R[IR[8:6]]; end
				1: begin R[IR[5:3]] = R[IR[11:9]] & R[IR[8:6]]; end
				2: begin R[IR[5:3]] = R[IR[11:9]] - R[IR[8:6]]; end
	
			
	
		
	
	
	

